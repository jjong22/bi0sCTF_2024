import out
from random import randint
from re import search
import numpy
from gmpy2 import *

# .sage 파일 에서는 ^ 가 제곱의 표시!

p = out.p
output = out.output

my_matrix = []
my_result = []

for i in range(100):
    a_sum = sum(output[0 + i*4])
    b_c_set = [0 for x in range(100)]
    
    b_set = output[1 + i * 4] 
    c_set = output[2 + i * 4] 
    
    for b,c in zip(b_set, c_set):
        b_c_set[b * 10 + c] += 1  # 10의 자리 : b, 1의 자리 : c
        
    qut = a_sum // p

    my_matrix.append(b_c_set)
    my_result.append(output[3 + i * 4] - a_sum + p * qut)
    
A = Matrix(my_matrix)
Y = vector(my_result)

X = A.solve_right(Y)

unknowns = []
for i in range(10):
    my_unknown = X[10 * i + i]
    
    m = my_unknown.nth_root(5)
    unknowns.append(m)
        
result = ""
for i in range(10):
    result += chr(unknowns[i] % 1000)
    
print("bi0sctf{%s}" %(result) )

# bi0sctf{8d522ae1a7}

'''
( unknowns[b] ^ 2 * unknowns[c] ^ 3, {b, c : 0 ~ 9} ) 
을 하나의 변수로 생각해서, 100개의 변수를 가진 연립방정식으로 생각할 수 있다.

이를 SageMath의 Matrix.solve_right() 을 이용해 해결하였다.
'''